name: Combined Workflow

on:
  # 定时任务触发
  schedule:
    - cron: '0 21 * * *'
  # 手动触发
  workflow_dispatch:
  # PR事件触发（用于Dependabot PR处理）
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

jobs:
  # 自动测试作业
  auto-sign:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Clone private repository
        env:
          PAT: ${{ secrets.PAT }}
        run: |
          git clone https://x-access-token:${PAT}@github.com/Jyf0214/veiled-journeys.git

      - name: Install dependencies globally
        run: |
          pip install -r veiled-journeys/requirements.txt

      - name: Run veiled-journeys scripts
        env:
          GitHub_Actions: true
          TOTKEN: ${{ secrets.TOKEN }}
          SUBJECT: ${{ secrets.SUBJECT }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}
          Git_EMAIL: ${{ secrets.TO_EMAIL }}
          FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          PHONE: ${{ secrets.PHONE }}
          PASSWORD: ${{ secrets.PASSWORD }}
        run: |
          cd veiled-journeys
          python skyland.py
          python smtp.py
          python bingapi.py
          python git.py

      - name: Process Skland App and Deploy to HWAWAI FC
        run: |
          # 检查 Token.txt 文件是否存在且内容合法
          cd veiled-journeys/Skland
          ls
          if [ ! -f "./TOKEN.txt" ]; then
            echo "Error: Token.txt does not exist."
            exit 1
          fi
     
          pip install --target=./ requests cryptography cffi
          find . -type d -name '*dist-info' -exec rm -rf {} +
          zip -r code.zip .
          python sync.py

  # Dependabot PR自动合并作业
  dependabot-merge:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if PR is from Dependabot
        id: check_dependabot
        run: |
          # 获取PR的作者信息
          PR_AUTHOR=$(jq -r '.user.login' < "${{ github.event.pull_request.head.repo.owner.login }}")
          echo "PR_AUTHOR=${PR_AUTHOR}" >> $GITHUB_ENV

      - name: Check PR status and merge/close
        run: |
          # 检查PR是否由Dependabot创建
          if [[ "${{ env.PR_AUTHOR }}" == "dependabot[bot]" ]]; then
            # 获取PR的状态
            PR_STATUS=$(gh pr view ${{ github.event.pull_request.number }} --json statusCheckRollup --jq '.statusCheckRollup.state')
            echo "PR status: ${PR_STATUS}"

            # 根据状态决定合并或关闭
            if [[ "${PR_STATUS}" == "EXPECTED" ]]; then
              echo "PR passed all checks. Merging..."
              gh pr merge ${{ github.event.pull_request.number }} --auto --squash --merge
            else
              echo "PR failed checks. Closing..."
              gh pr close ${{ github.event.pull_request.number }} --comment "This PR failed checks and is being closed automatically."
            fi
          else
            echo "PR is not from Dependabot. Skipping."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
