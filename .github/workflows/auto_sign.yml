name: Auto-sign

on:
  # 定时任务触发
  schedule:
    - cron: '0 21 * * *'
  # 手动触发
  workflow_dispatch:

jobs:
  auto-sign:
    runs-on: ubuntu-latest
    steps:
      # 步骤 1-5: 保持不变 (检出、设置Python、缓存、克隆、安装全局依赖)
      - uses: actions/checkout@v4
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Clone private repository (veiled-journeys)
        env:
          PAT: ${{ secrets.GITCODE_TOKEN }}
        run: |
          git clone https://Jyf0214:${PAT}@gitcode.com/Jyf0214/veiled-journeys.git
      - name: Install dependencies for sandboxed code
        run: |
          pip install -r veiled-journeys/requirements.txt

      # 步骤 6: 运行业务逻辑脚本 (保持不变)
      - name: Run encrypted business logic scripts
        working-directory: ./veiled-journeys
        env:
          # ... 所有需要的 secrets ...
          GitHub_Actions: true
          TOTKEN: ${{ secrets.TOKEN }}
          SUBJECT: ${{ secrets.SUBJECT }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}
          Git_EMAIL: ${{ secrets.TO_EMAIL }}
          FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          PHONE: ${{ secrets.PHONE }}
          PASSWORD: ${{ secrets.PASSWORD }}
          Jyf0214_PASSWORD: ${{ secrets.Jyf0214_PASSWORD }}
        run: |
          python main.py run skyland.py.enc && \
          python main.py run smtp.py.enc && \
          python main.py run bingapi.py.enc && \
          python main.py run git.py.enc && \
          python main.py run src/dailymessage.py.enc
      
      # ========================= 核心修复部分 =========================

      # 步骤 7: 在 Shell 环境中准备 Skland 的部署包 (采纳您的要求)
      - name: Prepare Skland package for deployment
        # 在 Skland 目录下执行所有文件操作
        working-directory: ./veiled-journeys/Skland
        run: |
          echo "Current directory: $(pwd)"
          echo "Listing files..."
          ls -la

          echo "Checking for TOKEN.txt..."
          if [ ! -f "./TOKEN.txt" ]; then
            echo "Error: Token.txt does not exist."
            exit 1
          fi

          echo "Installing local dependencies for packaging..."
          pip install --target=./ requests cryptography cffi

          echo "Cleaning up unnecessary directories..."
          find . -type d -name '*dist-info' -exec rm -rf {} +

          echo "Zipping contents into code.zip..."
          zip -r code.zip .
          
          echo "Package preparation complete. code.zip is ready."

      # 步骤 8: 运行加密的部署脚本来上传打包好的文件
      - name: Deploy Skland package to HWAWAI FC
        working-directory: ./veiled-journeys
        env:
          # 部署脚本同样需要所有 secrets
          GitHub_Actions: true
          # ... 这里可以只包含部署需要的 secrets ...
          HWAWAI_FC_ACCESS_KEY: ${{ secrets.HWAWAI_FC_ACCESS_KEY }} # 示例
          HWAWAI_FC_SECRET_KEY: ${{ secrets.HWAWAI_FC_SECRET_KEY }} # 示例
          Jyf0214_PASSWORD: ${{ secrets.Jyf0214_PASSWORD }}
        run: |
          # 调用加密的 sync.py，它的任务是上传上一步生成的 code.zip
          python main.py run Skland/sync.py.enc
