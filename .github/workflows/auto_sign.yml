name: Auto-sign (Encrypted Workflow)

on:
  # 定时任务触发
  schedule:
    - cron: '0 21 * * *'
  # 手动触发
  workflow_dispatch:

jobs:
  auto-sign-encrypted:
    runs-on: ubuntu-latest
    steps:
      # 步骤 1: 检出包含 main.py 和加密代码的 "安全包" 仓库
      - name: Checkout Secure Package Repository
        uses: actions/checkout@v4
        # 假设此工作流文件就在 veiled-journeys 仓库中
        # 如果在不同的仓库，需要提供 repo 和 token
        # with:
        #   repository: 'Jyf0214/veiled-journeys'
        #   token: ${{ secrets.GITCODE_TOKEN }} # 用于 checkout 私有仓库的 PAT

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      # 步骤 2: 安装所有依赖
      # requirements.txt 现在位于仓库根目录
      - name: Install dependencies from requirements.txt
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
        
      # 步骤 3: 通过 main.py 启动器运行所有加密脚本
      # 这是核心修改。所有脚本都通过 main.py 来执行。
      - name: Run Encrypted Scripts via Launcher
        env:
          # 所有 secrets 照常传入，main.py 会让沙箱内代码正常读取它们
          GitHub_Actions: true
          TOTKEN: ${{ secrets.TOKEN }}
          SUBJECT: ${{ secrets.SUBJECT }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}
          Git_EMAIL: ${{ secrets.TO_EMAIL }}
          FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          PHONE: ${{ secrets.PHONE }}
          PASSWORD: ${{ secrets.PASSWORD }}
          # 解密主密码，这是最重要的 secret！
          Jyf0214_PASSWORD: ${{ secrets.Jyf0214_PASSWORD }}
        run: |
          # 以前是 `python skyland.py`，现在是...
          # 注意：脚本的路径是它在加密仓库中的路径
          # 我们用 && 连接命令，如果任何一个脚本失败，整个作业就会失败
          pip install -r requirements.txt
          cd veiled-journeys
          python main.py run Skland/skyland.py.enc && \
          python main.py run smtp.py.enc && \
          python main.py run bingapi.py.enc && \
          python main.py run git.py.enc && \
          python main.py run src/dailymessage.py.enc

      # 步骤 4: 处理 Skland App 并部署
      # 这里的逻辑也需要适配沙箱环境的文件输出位置
      - name: Process Skland App and Deploy to HUAWEI FC
        run: |
          # 因为 skyland.py 在沙箱中运行时，其工作目录是 'Jyf0214/Skland'，
          # 所以它生成的 TOKEN.txt 文件会出现在物理路径 'Jyf0214/Skland/TOKEN.txt'
          cd veiled-journeys
          SKLAND_DIR="Jyf0214/Skland"
          
          echo "Checking for generated token in ${SKLAND_DIR}/TOKEN.txt"
          ls -l $SKLAND_DIR

          if [ ! -f "${SKLAND_DIR}/TOKEN.txt" ]; then
            echo "Error: Token.txt was not generated in ${SKLAND_DIR}."
            exit 1
          fi
          
          echo "Token file found. Proceeding with packaging."
          
          # 将依赖安装到沙箱的 "家" 目录下的对应位置
          pip install --target=${SKLAND_DIR} requests cryptography cffi
          
          # 清理不必要的文件
          find ${SKLAND_DIR} -type d -name '*dist-info' -exec rm -rf {} +
          
          # 进入该目录并打包
          cd $SKLAND_DIR
          zip -r code.zip .
          
          # 回到主目录，通过 main.py 运行加密的部署脚本
          cd ../../
          python main.py run Skland/sync.py.enc
