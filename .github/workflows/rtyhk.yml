name: Run OpenList + Kemono Downloader (Manual Access Window & Data Persistence)

on:
  workflow_dispatch:

jobs:
  openlist-kemono:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Prepare TERM env
        run: echo "TERM=xterm-256color" >> $GITHUB_ENV

      - name: Install OpenList
        run: |
          curl -fsSL "https://docs.openlist.team/v3.sh" -o v3.sh
          sudo bash v3.sh install /opt/openlist
          
      - name: Clone private repository (veiled-journeys)
        env:
          PAT: ${{ secrets.PAT }}
        run: git clone https://x-access-token:${PAT}@github.com/Jyf0214/veiled-journeys.git

      - name: Configure OpenList and Restore Data
        run: |
          cd /opt/openlist
          echo "Setting OpenList admin password..."
          sudo ./openlist admin set "${{ secrets.OPENLIST_PASSWORD }}"
          
          # 检查并从 veiled-journeys 仓库恢复数据
          if [ -d "${{ github.workspace }}/veiled-journeys/openlist-data" ]; then
            echo "Found existing data in 'veiled-journeys/openlist-data'. Restoring..."
            # 使用 rsync 可以更高效地同步文件
            sudo rsync -av --delete ${{ github.workspace }}/veiled-journeys/openlist-data/ /opt/openlist/data/
            echo "Data restoration complete."
          else
            echo "No 'openlist-data' directory found in repository. Starting with a fresh instance."
            # 确保数据目录存在，以便后续备份
            sudo mkdir -p /opt/openlist/data
          fi
        env:
          OPENLIST_PASSWORD: ${{ secrets.OPENLIST_PASSWORD }}

      - name: Start OpenList Service
        run: sudo /opt/openlist/openlist start

      - name: Install cloudflared
        run: |
          curl -L --output cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared.deb

      - name: Create Tunnel for 120s Manual Access
        run: |
          nohup cloudflared tunnel --url http://localhost:5244 > tunnel.log 2>&1 &
          echo $! > cloudflared.pid
          sleep 10
          TUNNEL_URL=$(grep -o 'https://[a-z0-9-]*\.trycloudflare\.com' tunnel.log | head -n 1)
          if [ -z "$TUNNEL_URL" ]; then
            echo "::error::Could not find Cloudflare Tunnel URL. Check tunnel.log for details."
            cat tunnel.log
            exit 1
          fi
          
          echo "===================================================================="
          echo "Cloudflare Tunnel is ACTIVE for manual access for the next 120 seconds."
          echo "Access URL: $TUNNEL_URL"
          echo "===================================================================="
          sleep 120

          echo "120 seconds are up. Tearing down the Cloudflare Tunnel..."
          kill $(< cloudflared.pid)
          echo "Tunnel for manual access has been stopped."

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install requests tqdm py7zr webdavclient3 rarfile mega.py

      - name: Run Kemono Downloader (Connecting to localhost)
        env:
          OPENLIST_PASSWORD: ${{ secrets.OPENLIST_PASSWORD }}
        run: |
          echo "Starting downloader, which will connect to OpenList locally."
          python veiled-journeys/kemono_downloader.py

      - name: Backup and Commit OpenList Data
        if: always() # 确保即使下载失败，也尝试备份数据
        run: |
          echo "Backing up OpenList data to the repository..."
          cd ${{ github.workspace }}/veiled-journeys
          
          # 从 OpenList 运行时目录同步数据到 Git 仓库克隆
          # --delete 选项会删除目标目录中源目录不存在的文件，保持完全同步
          sudo rsync -av --delete /opt/openlist/data/ ./openlist-data/
          
          # 配置 Git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # 添加、提交并推送数据
          # 首先检查是否有文件更改
          if [[ -z $(git status -s) ]]; then
            echo "No changes in OpenList data. Nothing to commit."
          else
            echo "Changes detected. Committing and pushing to repository..."
            git add openlist-data
            # [skip ci] 防止在 veiled-journeys 仓库中触发CI循环
            git commit -m "chore: Backup OpenList data from workflow run" -m "[skip ci]"
            git push
            echo "Data backup complete."
          fi

      - name: Stop OpenList Service
        if: always() # 确保无论前面的步骤是否成功，都尝试停止服务
        run: |
          echo "Stopping OpenList service..."
          sudo /opt/openlist/openlist stop