name: Install Cloudflared, Update Alist, and Run Tunnel

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  install_update_run_job: # Renamed job for clarity
    runs-on: ubuntu-latest

    steps:
      # 步骤 1: 检出运行工作流的代码库（如果需要的话）
      - name: Checkout workflow repository
        uses: actions/checkout@v4

      # 步骤 2: 安装基础工具
      # jq is needed to parse GitHub API response for the download URL
      - name: Install base tools (curl, gpg, git, jq, tar)
        run: sudo apt-get update && sudo apt-get install -y curl gpg git jq tar

      # 步骤 3: 安装 cloudflared (保持不变)
      - name: Create keyrings directory
        run: sudo mkdir -p --mode=0755 /usr/share/keyrings
      - name: Download Cloudflare GPG key
        run: curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | sudo gpg --dearmor --yes -o /usr/share/keyrings/cloudflare-main.gpg
      - name: Add Cloudflare APT repository
        run: echo "deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/cloudflared.list
      - name: Update package list and install cloudflared
        run: sudo apt-get update && sudo apt-get install -y cloudflared
      - name: Verify cloudflared installation
        run: cloudflared --version

      # 步骤 4: 克隆包含 Alist 和配置的私有仓库
      - name: Clone private repository (veiled-journeys)
        env:
          PAT: ${{ secrets.PAT }}
        run: git clone https://x-access-token:${PAT}@github.com/Jyf0214/veiled-journeys.git

      # --- 新增: 自动下载并更新 Alist 二进制文件 ---
      # 步骤 5: 下载最新的 Alist (Linux AMD64)
      - name: Download Latest Alist Binary
        run: |
          echo "Fetching latest Alist release URL for linux-amd64..."
          LATEST_URL=$(curl -s https://api.github.com/repos/alist-org/alist/releases/latest | jq -r '.assets[] | select(.name=="alist-linux-amd64.tar.gz") | .browser_download_url')
          if [ -z "$LATEST_URL" ] || [ "$LATEST_URL" == "null" ]; then
            echo "Error: Could not find latest Alist linux-amd64 download URL."
            exit 1
          fi
          echo "Downloading Alist from $LATEST_URL..."
          curl -L $LATEST_URL -o alist.tar.gz

      # 步骤 6: 解压并将 Alist 移动到仓库目录
      - name: Extract and Place Alist Binary
        run: |
          echo "Extracting alist.tar.gz..."
          tar -zxvf alist.tar.gz alist # Extract only the 'alist' file
          echo "Moving alist binary to veiled-journeys directory..."
          mv ./alist ./veiled-journeys/alist
          # Clean up downloaded archive
          rm alist.tar.gz
          echo "Checking file type of the new Alist binary:"
          file ./veiled-journeys/alist

      # 步骤 7: 配置 Git 用于提交
      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      # 步骤 8: 提交并推送更新后的 Alist 二进制文件 (如果改变了)
      - name: Commit and Push Updated Alist Binary (if changed)
        env:
          PAT: ${{ secrets.PAT }}
        working-directory: ./veiled-journeys # Important: Operate within the cloned repo dir
        run: |
          # Check if the alist file has changes staged or unstaged
          if ! git diff --quiet HEAD -- ./alist && ! git diff --cached --quiet HEAD -- ./alist; then
            echo "Alist binary has changed. Committing and pushing..."
            git add ./alist
            # CRITICAL: Include [skip ci] in the commit message to prevent loops!
            git commit -m "ci: Update Alist binary to latest [skip ci]"
            # Use the PAT to push back to the main branch (adjust branch if needed)
            git push https://x-access-token:${PAT}@github.com/Jyf0214/veiled-journeys.git HEAD:main
          else
            echo "Alist binary is already up-to-date. No commit needed."
          fi
      # --- 结束: 自动下载并更新 Alist 二进制文件 ---

      # 步骤 9: 安装 Python 依赖 (现在是第 9 步)
      - name: Install Python dependencies
        run: pip install -r veiled-journeys/requirements.txt

      # 步骤 10: 安装 Alist 可能需要的其他依赖 (现在是第 10 步)
      - name: Install image optimization tools
        run: sudo apt-get update && sudo apt-get install -y jpegoptim optipng

      # 步骤 11: 设置 Alist 和脚本的执行权限 (现在是第 11 步)
      # 确保 Alist 文件存在且正确
      - name: Set execution permissions
        run: |
          chmod +x veiled-journeys/alist
          chmod +x veiled-journeys/process_loop.sh

      # 步骤 12: 准备 Cloudflare Tunnel (现在是第 12 步)
      - name: Start Cloudflared Tunnel in background
        working-directory: ./veiled-journeys
        run: |
          echo "Starting Cloudflared tunnel..."
          nohup cloudflared tunnel --config .cloudflared/config.yml run > cloudflared.log 2>&1 &
          sleep 5

      # 步骤 13: 启动 Alist 服务 (现在是第 13 步)
      - name: Start Alist server in background
        working-directory: ./veiled-journeys
        run: |
          echo "Starting Alist server..."
          # Use --data . explicitly if needed, otherwise Alist might default correctly
          nohup ./alist server --data . > alist.log 2>&1 &
          sleep 5

      # 步骤 14: (可选) 执行你的处理循环脚本 (现在是第 14 步)
      # - name: Execute processing loop
      #   working-directory: ./veiled-journeys
      #   run: ./process_loop.sh

      # 步骤 15: 检查服务状态或日志 (现在是第 15 步)
      - name: Check background process status and logs
        working-directory: ./veiled-journeys
        run: |
          echo "--- Cloudflared Status (ps) ---"
          ps aux | grep cloudflared || echo "Cloudflared process not found"
          echo "--- Alist Status (ps) ---"
          ps aux | grep './alist server' || echo "Alist process not found"
          echo "--- Cloudflared Log ---"
          cat cloudflared.log || echo "Cloudflared log not found"
          echo "--- Alist Log ---"
          cat alist.log || echo "Alist log not found"
          echo "--- Testing Alist locally ---"
          curl --fail http://localhost:5244 || echo "Failed to connect to Alist locally on port 5244"

      # 步骤 16: 打印最终的当前工作目录 (现在是第 16 步)
      - name: Print Final Current Working Directory
        run: pwd