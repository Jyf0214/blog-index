name: Run OpenList + Kemono Downloader (Manual Access Window & Data Persistence)

on:
  workflow_dispatch:

jobs:
  openlist-kemono:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Prepare TERM env
        run: echo "TERM=xterm-256color" >> $GITHUB_ENV

      - name: Install OpenList
        run: |
          echo "Installing OpenList..."
          curl -fsSL "https://docs.openlist.team/v3.sh" -o v3.sh
          sudo bash v3.sh install /opt/openlist
          # webdavclient3 is often needed by OpenList or its components, or by the downloader
          pip install webdavclient3

      - name: Clone private repository (veiled-journeys)
        env:
          PAT: ${{ secrets.PAT }} # 保持 PAT 秘密在此处可用
        run: |
          echo "Cloning private repository veiled-journeys..."
          git clone https://x-access-token:${PAT}@github.com/Jyf0214/veiled-journeys.git

      - name: Configure OpenList and Restore Data
        id: configure-openlist-data
        run: |
          echo "Configuring OpenList and restoring data..."
          cd /opt/openlist
          echo "Setting OpenList admin password..."
          sudo ./openlist admin set "${{ secrets.OPENLIST_PASSWORD }}" # 保持 OpenList 密码秘密在此处可用
          
          DATA_RESTORED="false"
          if [ -d "${{ github.workspace }}/veiled-journeys/openlist-data" ]; then
            echo "Found existing data in 'veiled-journeys/openlist-data'. Restoring..."
            sudo rsync -av --delete ${{ github.workspace }}/veiled-journeys/openlist-data/ /opt/openlist/data/
            echo "Data restoration complete."
            DATA_RESTORED="true"
          else
            echo "No 'openlist-data' directory found in repository. Starting with a fresh instance."
            sudo mkdir -p /opt/openlist/data
          fi
          echo "data_restored=$DATA_RESTORED" >> $GITHUB_OUTPUT
          echo "Data restoration status: $DATA_RESTORED"
        env:
          OPENLIST_PASSWORD: ${{ secrets.OPENLIST_PASSWORD }} # 再次确认 OpenList 密码秘密在此处可用

      - name: Install Python dependencies
        run: |
          echo "Installing Python dependencies..."
          pip install --upgrade pip
          pip install requests tqdm py7zr webdavclient3 rarfile

      - name: Install megadl CLI tool
        run: |
          echo "Installing megatools (includes megadl)..."
          sudo apt update
          sudo apt install megatools -y
          echo "Verifying megadl installation..."
          megadl --version

      - name: Install Cloudflare Tunnel (cloudflared)
        run: |
          echo "Downloading and installing Cloudflare Tunnel client (cloudflared)..."
          curl -L "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64" -o cloudflared
          sudo mv cloudflared /usr/local/bin/cloudflared
          sudo chmod +x /usr/local/bin/cloudflared
          echo "Verifying cloudflared installation..."
          cloudflared --version

      - name: Start OpenList and Conditionally Start Cloudflare Tunnel (free mode)
        env:
          OPENLIST_PASSWORD: ${{ secrets.OPENLIST_PASSWORD }}
        run: |
          echo "Starting OpenList in the background..."
          sudo /opt/openlist/openlist start &
          echo "OPENLIST_PID=$!" >> $GITHUB_ENV
          echo "OpenList started with PID ${OPENLIST_PID:-<unknown>}."
          
          # 给 OpenList 启动留出时间
          sleep 10
          
          if [ "${{ steps.configure-openlist-data.outputs.data_restored }}" == "false" ]; then
            echo "OpenList数据未找到或未恢复。启动Cloudflare Tunnel (免费模式)以进行潜在的手动设置/调试..."
            # 启动 cloudflared tunnel --url 并将其输出到文件，以便安全地在后台运行并捕获URL
            cloudflared tunnel --url http://localhost:5244 > cloudflared_tunnel.log 2>&1 &
            echo "TUNNEL_PID=$!" >> $GITHUB_ENV # 捕获PID
            echo "Cloudflare Tunnel (free mode) started with PID ${TUNNEL_PID:-<unknown>}."
            
            # 留出一些时间让隧道启动并生成URL
            sleep 10
            
            # 从日志文件中提取URL
            CLOUDFLARED_URL=$(grep -o 'https://[^ ]*\.trycloudflare\.com' cloudflared_tunnel.log | head -n 1)
            
            echo "CLOUDFLARED_URL=$CLOUDFLARED_URL" >> $GITHUB_ENV
            echo "Cloudflare Tunnel (免费模式) 访问URL为: $CLOUDFLARED_URL"
            if [ -z "$CLOUDFLARED_URL" ]; then
              echo "警告: 未能从Cloudflare Tunnel输出中提取到URL。请检查日志文件 'cloudflared_tunnel.log' 以获取详细信息。"
              cat cloudflared_tunnel.log
            fi
            
            echo "隧道建立连接留出时间..."
            sleep 5
          else
            echo "OpenList数据已恢复。跳过Cloudflare Tunnel (免费模式) 启动。"
          fi

      - name: Run Kemono Downloader
        env:
          OPENLIST_PASSWORD: ${{ secrets.OPENLIST_PASSWORD }}
        run: |
          echo "Running Kemono Downloader..."
          
          echo "Kemono Downloader finished."

      - name: Manual Access Window (Optional)
        run: |
          echo "保持工作流活跃，以便手动访问。请检查日志以获取OpenList/下载器输出。"
          # 如果 Cloudflare Tunnel (免费模式) 启动了，在这里再次打印其URL，方便查看。
          if [ -n "${{ env.CLOUDFLARED_URL }}" ]; then
            echo "Cloudflare Tunnel (免费模式) 访问URL为: ${{ env.CLOUDFLARED_URL }}"
          else
            echo "Cloudflare Tunnel (免费模式) 未启动或URL未能提取。"
          fi
          # 将作业保持活跃2小时（7200秒）。您可以根据需要调整此持续时间。
          sleep 2000
          echo "手动访问窗口关闭。"

      - name: Stop Services and Backup Data
        if: always() # 确保此步骤即使在之前的步骤失败时也能运行
        run: |
          echo "Stopping services and backing up OpenList data..."
          
          # 如果 Cloudflare Tunnel (免费模式) 已启动，则停止它
          if [ -n "${{ env.TUNNEL_PID }}" ]; then
            echo "Stopping Cloudflare Tunnel (PID ${{ env.TUNNEL_PID }})..."
            kill ${{ env.TUNNEL_PID }} || true
          fi
          
          # 停止 OpenList 服务
          if [ -n "${{ env.OPENLIST_PID }}" ]; then
            echo "Stopping OpenList (PID ${{ env.OPENLIST_PID }})..."
            sudo kill ${{ env.OPENLIST_PID }} || sudo /opt/openlist/openlist stop || true
          else
            echo "OPENLIST_PID 未找到，尝试通过命令停止OpenList..."
            sudo /opt/openlist/openlist stop || true
          fi
          
          echo "Backing up OpenList data to the repository..."
          cd ${{ github.workspace }}/veiled-journeys
          sudo rsync -av --delete /opt/openlist/data/ ./openlist-data/
          
          echo "Fixing permissions for git..."
          sudo chown -R $(whoami):$(whoami) ./openlist-data/
          
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          if [[ -z $(git status --porcelain) ]]; then
            echo "OpenList数据没有变化。无需提交。"
          else
            echo "检测到变化。提交并推送到仓库..."
            git add openlist-data
            git commit -m "chore: Backup OpenList data from workflow run" -m "[skip ci]"
            git push
            echo "数据备份完成。"
          fi