name: Install Cloudflared

# 控制工作流何时运行
on:
  push:
    branches: [ main ] # 当推送到 main 分支时触发
  workflow_dispatch:   # 允许从 Actions 页面手动触发

jobs:
  install_cloudflared_job:
    # 指定运行此作业的 Runner 类型
    runs-on: ubuntu-latest

    steps:
      # 步骤 1: 检出你的代码库（可选，但通常需要后续步骤）
      - name: Checkout repository
        uses: actions/checkout@v4 # 使用官方的 checkout action

      # 步骤 2: 创建 GPG 密钥存储目录
      - name: Create keyrings directory
        run: sudo mkdir -p --mode=0755 /usr/share/keyrings
        # 使用 sudo 因为这是系统目录

      # 步骤 3: 下载 Cloudflare GPG 密钥
      # 使用 curl 下载密钥，然后用 gpg --dearmor 转换格式并保存
      - name: Download Cloudflare GPG key
        run: |
          curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | sudo gpg --dearmor --yes -o /usr/share/keyrings/cloudflare-main.gpg

      # 步骤 4: 添加 Cloudflare APT 仓库源
      # 将仓库信息写入 sources.list.d 目录下的文件
      # [signed-by=...] 指定使用哪个 GPG 密钥验证仓库
      # $(lsb_release -cs) 会自动获取当前 Ubuntu 版本的代号 (例如: jammy, focal)
      - name: Add Cloudflare APT repository
        run: |
          echo "deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/cloudflared.list

      # 步骤 5: 更新软件包列表并安装 cloudflared
      - name: Update package list and install cloudflared
        run: |
          sudo apt-get update
          sudo apt-get install -y cloudflared # -y 选项自动确认安装

      # 步骤 6: 验证 cloudflared 是否安装成功
      - name: Verify cloudflared installation
        run: cloudflared --version

      # --- 在这里添加后续需要使用 cloudflared 的步骤 ---
      # 例如：登录、创建/运行隧道等
      # 注意：对于登录和运行隧道，你可能需要使用 GitHub Secrets 来安全地存储凭据或 Token
      # - name: Login to Cloudflare (Example - requires secrets)
      #   env:
      #     CLOUDFLARE_TUNNEL_TOKEN: ${{ secrets.CF_TUNNEL_TOKEN }} # 假设你设置了一个名为 CF_TUNNEL_TOKEN 的 Secret
      #   run: cloudflared tunnel login --token $CLOUDFLARE_TUNNEL_TOKEN # 示例命令，具体看 cloudflared 文档

      # - name: Run Cloudflared Tunnel (Example - requires secrets & background process handling)
      #   env:
      #      TUNNEL_CONFIG: ${{ secrets.CF_TUNNEL_CONFIG_BASE64 }} # 假设你把 config.yml base64 编码后存入 Secret
      #      TUNNEL_CREDENTIALS: ${{ secrets.CF_TUNNEL_CREDENTIALS_BASE64 }} # 假设你把 .json 凭证文件 base64 编码后存入 Secret
      #   run: |
      #     echo "Setting up tunnel config and credentials..."
      #     mkdir -p $HOME/.cloudflared
      #     echo $TUNNEL_CONFIG | base64 -d > $HOME/.cloudflared/config.yml
      #     echo $TUNNEL_CREDENTIALS | base64 -d > $HOME/.cloudflared/YOUR_TUNNEL_ID.json # 替换 YOUR_TUNNEL_ID.json
      #     echo "Running tunnel in background..."
      #     nohup cloudflared tunnel --config $HOME/.cloudflared/config.yml run YOUR_TUNNEL_NAME > cloudflared.log 2>&1 & # 替换 YOUR_TUNNEL_NAME
      #     sleep 10 # Give tunnel time to start
      #     echo "Cloudflared log:"
      #     cat cloudflared.log
      #     # 注意: GitHub Action 通常是短时任务，长时间运行的后台进程可能不适合，除非用于短暂的测试或部署步骤