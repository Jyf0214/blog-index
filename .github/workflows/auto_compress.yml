name: Constrained Parallel Segmented Video Compression

on:
  workflow_dispatch:

env:
  WORKFLOW_RUN_ID: ${{ github.run_id }}
  SEGMENT_DURATION_SECONDS: 600

jobs:
  # 任务1：分割视频并生成矩阵所需的JSON数组
  split_video:
    runs-on: ubuntu-latest
    outputs:
      # 输出矩阵所需的JSON数组字符串，例如 "[0,1,2]"
      matrix_payload: ${{ steps.split.outputs.matrix_array }}
    steps:
      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Clone private repository for scripts
        env:
          PAT: ${{ secrets.PAT }}
        run: |
          git clone https://x-access-token:${PAT}@github.com/Jyf0214/veiled-journeys.git

      - name: Install Python requirements
        run: |
          pip install -r veiled-journeys/requirements.txt

      - name: Download Video File
        run: |
          mkdir -p original_video
          python veiled-journeys/webdav_download.py -a="MyVideos/" -b="./original_video/" -c=1

      - name: Split video and generate matrix payload
        id: split
        run: |
          mkdir -p video_segments
          ORIGINAL_FILE=$(find ./original_video -maxdepth 1 -type f -name "*.mp4" -print -quit)
          
          echo "Splitting '$ORIGINAL_FILE' into ${{ env.SEGMENT_DURATION_SECONDS }}s segments..."
          ffmpeg -i "$ORIGINAL_FILE" -c copy -f segment -segment_time ${{ env.SEGMENT_DURATION_SECONDS }} -reset_timestamps 1 "video_segments/segment_%03d.mp4"
          
          COUNT=$(ls -1 video_segments/*.mp4 | wc -l)
          echo "Generated $COUNT segments."

          # --- 核心修正 ---
          # 在 shell 中直接生成 JSON 数组字符串
          # seq 0 ($COUNT - 1) 会生成 0 1 2 ...
          # tr '\n' ',' 会将换行符替换为逗号 -> "0,1,2,"
          # sed 's/,$//' 会移除最后一个逗号 -> "0,1,2"
          if [ "$COUNT" -gt 0 ]; then
            SEQUENCE=$(seq 0 $(($COUNT - 1)) | tr '\n' ',' | sed 's/,$//')
            JSON_ARRAY="[${SEQUENCE}]"
          else
            JSON_ARRAY="[]"
          fi
          
          echo "Generated matrix payload: ${JSON_ARRAY}"
          echo "matrix_array=${JSON_ARRAY}" >> $GITHUB_OUTPUT

      - name: Save Original Video to Cache
        uses: actions/cache/save@v4
        with:
          path: original_video/
          key: original-${{ env.WORKFLOW_RUN_ID }}
          
      - name: Save Video Segments to Cache
        uses: actions/cache/save@v4
        with:
          path: video_segments/
          key: segments-${{ env.WORKFLOW_RUN_ID }}

  # 任务2：并行压缩所有视频片段
  compress_segments:
    runs-on: ubuntu-latest
    needs: split_video
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        # --- 核心修正 ---
        # 使用 fromJSON() 来解析上一个任务输出的字符串
        segment_index: ${{ fromJSON(needs.split_video.outputs.matrix_payload) }}
        
    steps:
      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Restore Video Segments from Cache
        uses: actions/cache/restore@v4
        with:
          path: video_segments/
          key: segments-${{ env.WORKFLOW_RUN_ID }}
          fail-on-cache-miss: true

      - name: Process One Segment with 'veryslow' preset
        run: |
          mkdir -p compressed_segment
          FORMATTED_INDEX=$(printf "%03d" ${{ matrix.segment_index }})
          SEGMENT_FILE="video_segments/segment_${FORMATTED_INDEX}.mp4"
          
          echo "Processing segment: $SEGMENT_FILE"
          ffmpeg -i "$SEGMENT_FILE" -c:v libx265 -preset veryslow -crf 23 -tag:v hvc1 -c:a copy "compressed_segment/compressed_${FORMATTED_INDEX}.mp4"

      - name: Save Compressed Segment to Cache
        uses: actions/cache/save@v4
        with:
          path: compressed_segment/
          key: compressed-${{ env.WORKFLOW_RUN_ID }}-${{ matrix.segment_index }}

  # 任务3：合并所有压缩好的片段并上传（此部分无改动）
  merge_and_upload:
    runs-on: ubuntu-latest
    needs: [split_video, compress_segments]
    steps:
      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Restore Original Video from Cache
        uses: actions/cache/restore@v4
        with:
          path: original_video/
          key: original-${{ env.WORKFLOW_RUN_ID }}
          fail-on-cache-miss: true

      - name: Restore All Compressed Segments from Cache
        uses: actions/cache/restore@v4
        with:
          path: ./
          restore-keys: |
            compressed-${{ env.WORKFLOW_RUN_ID }}-
          fail-on-cache-miss: true

      - name: Clone private repository for upload script
        env:
          PAT: ${{ secrets.PAT }}
        run: |
          git clone https://x-access-token:${PAT}@github.com/Jyf0214/veiled-journeys.git
      
      - name: Install Python requirements for upload script
        run: |
          pip install -r veiled-journeys/requirements.txt

      - name: Merge compressed segments
        id: merge
        run: |
          find . -path "*compressed_segment/*.mp4" | sort -V | while read -r f; do echo "file '$f'" >> file_list.txt; done
          echo "--- File List for Concat ---"
          cat file_list.txt
          echo "----------------------------"
          ffmpeg -f concat -safe 0 -i file_list.txt -c copy final_video.mp4
          echo "final_file_path=final_video.mp4" >> $GITHUB_OUTPUT

      - name: Compare sizes and select final file
        id: select
        run: |
          ORIGINAL_FILE=$(find ./original_video -maxdepth 1 -type f -name "*.mp4" -print -quit)
          MERGED_FILE="${{ steps.merge.outputs.final_file_path }}"
          ORIGINAL_SIZE=$(stat -c%s "$ORIGINAL_FILE")
          MERGED_SIZE=$(stat -c%s "$MERGED_FILE")
          echo "Original size: $ORIGINAL_SIZE bytes"
          echo "Merged compressed size: $MERGED_SIZE bytes"
          FINAL_FILE_PATH="$ORIGINAL_FILE"
          if [ "$MERGED_SIZE" -lt "$ORIGINAL_SIZE" ] && [ "$MERGED_SIZE" -gt 0 ]; then
            echo "Merged file is smaller. Selecting merged version."
            FINAL_FILE_PATH="$MERGED_FILE"
          else
            echo "Merged file is not smaller or is empty. Selecting original version."
          fi
          echo "final_file=$FINAL_FILE_PATH" >> $GITHUB_OUTPUT

      - name: Upload Final Video to GoFile
        run: |
          echo "Uploading ${{ steps.select.outputs.final_file }}..."
          python veiled-journeys/gofile_manager.py upload \
            --file "${{ steps.select.outputs.final_file }}" \
            --list-file "compressed_videos_list.txt" \
            > /dev/null 2>&1