name: Video Compression Workflow - Segmented & RAM Disk Optimized

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # ---------- 缓存 & 依赖 ----------
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
            ~/.cache/pip
            /usr/local/bin/ffmpeg
            /usr/local/bin/ffprobe
          key: ${{ runner.os }}-deps-ffmpeg-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-deps-ffmpeg-

      - name: Setup Dependencies
        run: |
          if [ ! -f /usr/local/bin/ffmpeg ]; then
            echo "FFmpeg/FFprobe not found in cache, installing..."
            sudo apt-get update
            sudo apt-get install -y ffmpeg
            sudo cp /usr/bin/ffmpeg  /usr/local/bin/ffmpeg
            sudo cp /usr/bin/ffprobe /usr/local/bin/ffprobe
          else
            echo "FFmpeg/FFprobe found in cache."
            sudo ln -s /usr/local/bin/ffmpeg  /usr/bin/ffmpeg  || true
            sudo ln -s /usr/local/bin/ffprobe /usr/bin/ffprobe || true
          fi

      # ---------- 创建 RAM Disk ----------
      - name: Create RAM Disk
        run: |
          sudo mkdir -p /mnt/ramdisk
          sudo mount -t tmpfs -o size=4G tmpfs /mnt/ramdisk
          df -h

      # ---------- 克隆仓库 & 下载素材 ----------
      - name: Clone veiled-journeys repository
        env:
          PAT: ${{ secrets.PAT }}
        run: |
          git clone https://x-access-token:${PAT}@github.com/Jyf0214/veiled-journeys.git /mnt/ramdisk/veiled-journeys

      - name: Install Python requirements
        run: |
          pip install -r /mnt/ramdisk/veiled-journeys/requirements.txt

      - name: Download One Video File to RAM Disk
        run: |
          mkdir -p /mnt/ramdisk/video_work
          cd /mnt/ramdisk/veiled-journeys
          python webdav_download.py -a="MyVideos/" -b="../video_work/" -c=1
          cd /home/runner/work

      # ---------- 分段压缩处理 ----------
      # ---------- 分段压缩处理（串行版） ----------
      - name: Process Video in Segments to Avoid Timeout
        id: process
        shell: bash
        run: |
          set -e
          cd /mnt/ramdisk/video_work

          # 查找第一个 mp4 文件
          ORIGINAL_FILE_PATH=$(find . -maxdepth 1 -type f -name "*.mp4" -print -quit)
          [ -z "$ORIGINAL_FILE_PATH" ] && { echo "::error::No .mp4 file found!"; exit 1; }
          ORIGINAL_FILENAME=$(basename "$ORIGINAL_FILE_PATH")
          echo "Processing file: $ORIGINAL_FILENAME"

          # 1. 创建临时目录
          mkdir -p segments compressed_segments

          # 2. 高效无损分割
          echo "Step 1: Splitting video into ~10 minute segments (lossless)..."
          ffmpeg -i "$ORIGINAL_FILENAME" \
                 -f segment \
                 -segment_time 5 \
                 -c copy \
                 -reset_timestamps 1 \
                 "segments/segment_%03d.mp4"
          echo "Splitting complete."

          # 3. 串行压缩 (Sequential Compression) - 更稳定可靠
          echo "Step 2: Compressing segments sequentially..."
          CONCAT_LIST_FILE="concat_list.txt"
          > "$CONCAT_LIST_FILE"

          find segments -type f -name "*.mp4" | sort | while read -r f; do
            BASENAME=$(basename "$f")
            COMPRESSED_SEGMENT_PATH="compressed_segments/$BASENAME"
            echo "Compressing $f -> $COMPRESSED_SEGMENT_PATH..."

            # 前台执行，确保失败即停止
            ffmpeg -i "$f" \
                   -c:v libx265 \
                   -preset veryslow \
                   -crf 18 \
                   -tag:v hvc1 \
                   -c:a copy \
                   "$COMPRESSED_SEGMENT_PATH"

            # 验证压缩产物
            if [ -s "$COMPRESSED_SEGMENT_PATH" ]; then
              echo "Compression successful for $BASENAME."
              echo "file '$COMPRESSED_SEGMENT_PATH'" >> "$CONCAT_LIST_FILE"
            else
              echo "::error::Compression failed for $BASENAME, output file is missing or empty!"
              exit 1
            fi
          done

          echo "All segments compressed."

          # 4. 无损合并
          echo "Step 3: Merging compressed segments (lossless)..."
          MERGED_FILENAME="compressed_${ORIGINAL_FILENAME}"
          ffmpeg -f concat -safe 0 -i "$CONCAT_LIST_FILE" -c copy "$MERGED_FILENAME"

          # 5. 比较和清理
          echo "Step 4: Comparing sizes and cleaning up..."
          ORIGINAL_SIZE=$(stat -c%s "$ORIGINAL_FILENAME")

          if [ -s "$MERGED_FILENAME" ]; then
            COMPRESSED_SIZE=$(stat -c%s "$MERGED_FILENAME")
            echo "Original size: $ORIGINAL_SIZE bytes"
            echo "Compressed size: $COMPRESSED_SIZE bytes"

            FINAL_FILENAME="$ORIGINAL_FILENAME"
            if [ "$ORIGINAL_SIZE" -gt "$COMPRESSED_SIZE" ]; then
              echo "Compressed file is smaller. Keeping compressed version."
              mv "$MERGED_FILENAME" "final_output.mp4"
              rm "$ORIGINAL_FILENAME"
              mv "final_output.mp4" "$FINAL_FILENAME"
            else
              echo "Compressed file is not smaller. Keeping original."
              rm "$MERGED_FILENAME"
            fi
          else
            echo "::error::Merged file is empty or does not exist. Keeping original."
            FINAL_FILENAME="$ORIGINAL_FILENAME"
          fi

          rm -rf segments compressed_segments "$CONCAT_LIST_FILE"
          echo "final_file=/mnt/ramdisk/video_work/$FINAL_FILENAME" >> "$GITHUB_OUTPUT"
          cd /home/runner/work

      # ---------- 上传到 GoFile ----------
      - name: Upload to GoFile and Update List (Silent)
        run: |
          python /mnt/ramdisk/veiled-journeys/gofile_manager.py upload \
            --file "${{ steps.process.outputs.final_file }}" \
            --list-file "compressed_videos_list.txt" \
            > /dev/null 2>&1
